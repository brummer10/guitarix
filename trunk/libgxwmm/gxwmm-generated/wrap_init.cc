// Generated by generate_wrap_init.pl -- DO NOT MODIFY!

#define GLIBMM_INCLUDED_FROM_WRAP_INIT_CC
#include <glibmm.h>
#include <gxwmm/wrap_init.h>
#include <glibmm/error.h>
#include <glibmm/object.h>

// #include the widget headers so that we can call the get_type() static methods:
#include "bigknob.h"
#include "controlparameter.h"
#include "eqslider.h"
#include "fastmeter.h"
#include "hslider.h"
#include "iredit.h"
#include "knob.h"
#include "levelslider.h"
#include "meterscale.h"
#include "midknob.h"
#include "minislider.h"
#include "paintbox.h"
#include "playhead.h"
#include "portdisplay.h"
#include "racktuner.h"
#include "radiobutton.h"
#include "regler.h"
#include "selector.h"
#include "simplevaluedisplay.h"
#include "smallknob.h"
#include "smallknobr.h"
#include "switch.h"
#include "toggleimage.h"
#include "tuner.h"
#include "valuedisplay.h"
#include "vslider.h"
#include "waveview.h"
#include "wheel.h"
#include "wheelvertical.h"

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable : 4273 ) // Disable MSVC warning C4273 in wrap_init.cc momentarily
#endif // _MSC_VER

extern "C"
{
//Declarations of the *_get_type() functions:

GType gx_big_knob_get_type(void);
GType gx_eq_slider_get_type(void);
GType gx_fast_meter_get_type(void);
GType gx_hslider_get_type(void);
GType gx_ir_edit_get_type(void);
GType gx_knob_get_type(void);
GType gx_level_slider_get_type(void);
GType gx_meter_scale_get_type(void);
GType gx_mid_knob_get_type(void);
GType gx_mini_slider_get_type(void);
GType gx_paint_box_get_type(void);
GType gx_play_head_get_type(void);
GType gx_port_display_get_type(void);
GType gx_rack_tuner_get_type(void);
GType gx_radio_button_get_type(void);
GType gx_regler_get_type(void);
GType gx_selector_get_type(void);
GType gx_simple_value_display_get_type(void);
GType gx_small_knob_get_type(void);
GType gx_small_knob_r_get_type(void);
GType gx_switch_get_type(void);
GType gx_toggle_image_get_type(void);
GType gx_tuner_get_type(void);
GType gx_value_display_get_type(void);
GType gx_vslider_get_type(void);
GType gx_wave_view_get_type(void);
GType gx_wheel_get_type(void);
GType gx_wheel_vertical_get_type(void);

//Declarations of the *_error_quark() functions:

} // extern "C"

#ifdef _MSC_VER
#pragma warning( pop )
#endif // _MSC_VER

namespace Gxw {

//Declarations of the *_Class::wrap_new() methods, instead of including all the private headers:

class BigKnob_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class EqSlider_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class FastMeter_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class HSlider_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class IREdit_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Knob_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class LevelSlider_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MeterScale_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MidKnob_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class MiniSlider_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PaintBox_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PlayHead_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class PortDisplay_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RackTuner_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class RadioButton_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Regler_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Selector_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class SimpleValueDisplay_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class SmallKnob_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class SmallKnobR_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Switch_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ToggleImage_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Tuner_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class ValueDisplay_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class VSlider_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class WaveView_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class Wheel_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };
class WheelVertical_Class { public: static Glib::ObjectBase* wrap_new(GObject*); };

void wrap_init()
{
  // Register Error domains in the main namespace:

  // Map gtypes to gtkmm wrapper-creation functions:
  Glib::wrap_register(gx_big_knob_get_type(), &BigKnob_Class::wrap_new);
  Glib::wrap_register(gx_eq_slider_get_type(), &EqSlider_Class::wrap_new);
  Glib::wrap_register(gx_fast_meter_get_type(), &FastMeter_Class::wrap_new);
  Glib::wrap_register(gx_hslider_get_type(), &HSlider_Class::wrap_new);
  Glib::wrap_register(gx_ir_edit_get_type(), &IREdit_Class::wrap_new);
  Glib::wrap_register(gx_knob_get_type(), &Knob_Class::wrap_new);
  Glib::wrap_register(gx_level_slider_get_type(), &LevelSlider_Class::wrap_new);
  Glib::wrap_register(gx_meter_scale_get_type(), &MeterScale_Class::wrap_new);
  Glib::wrap_register(gx_mid_knob_get_type(), &MidKnob_Class::wrap_new);
  Glib::wrap_register(gx_mini_slider_get_type(), &MiniSlider_Class::wrap_new);
  Glib::wrap_register(gx_paint_box_get_type(), &PaintBox_Class::wrap_new);
  Glib::wrap_register(gx_play_head_get_type(), &PlayHead_Class::wrap_new);
  Glib::wrap_register(gx_port_display_get_type(), &PortDisplay_Class::wrap_new);
  Glib::wrap_register(gx_rack_tuner_get_type(), &RackTuner_Class::wrap_new);
  Glib::wrap_register(gx_radio_button_get_type(), &RadioButton_Class::wrap_new);
  Glib::wrap_register(gx_regler_get_type(), &Regler_Class::wrap_new);
  Glib::wrap_register(gx_selector_get_type(), &Selector_Class::wrap_new);
  Glib::wrap_register(gx_simple_value_display_get_type(), &SimpleValueDisplay_Class::wrap_new);
  Glib::wrap_register(gx_small_knob_get_type(), &SmallKnob_Class::wrap_new);
  Glib::wrap_register(gx_small_knob_r_get_type(), &SmallKnobR_Class::wrap_new);
  Glib::wrap_register(gx_switch_get_type(), &Switch_Class::wrap_new);
  Glib::wrap_register(gx_toggle_image_get_type(), &ToggleImage_Class::wrap_new);
  Glib::wrap_register(gx_tuner_get_type(), &Tuner_Class::wrap_new);
  Glib::wrap_register(gx_value_display_get_type(), &ValueDisplay_Class::wrap_new);
  Glib::wrap_register(gx_vslider_get_type(), &VSlider_Class::wrap_new);
  Glib::wrap_register(gx_wave_view_get_type(), &WaveView_Class::wrap_new);
  Glib::wrap_register(gx_wheel_get_type(), &Wheel_Class::wrap_new);
  Glib::wrap_register(gx_wheel_vertical_get_type(), &WheelVertical_Class::wrap_new);

  // Register the gtkmm gtypes:
  g_type_ensure(BigKnob::get_type());
  g_type_ensure(EqSlider::get_type());
  g_type_ensure(FastMeter::get_type());
  g_type_ensure(HSlider::get_type());
  g_type_ensure(IREdit::get_type());
  g_type_ensure(Knob::get_type());
  g_type_ensure(LevelSlider::get_type());
  g_type_ensure(MeterScale::get_type());
  g_type_ensure(MidKnob::get_type());
  g_type_ensure(MiniSlider::get_type());
  g_type_ensure(PaintBox::get_type());
  g_type_ensure(PlayHead::get_type());
  g_type_ensure(PortDisplay::get_type());
  g_type_ensure(RackTuner::get_type());
  g_type_ensure(RadioButton::get_type());
  g_type_ensure(Regler::get_type());
  g_type_ensure(Selector::get_type());
  g_type_ensure(SimpleValueDisplay::get_type());
  g_type_ensure(SmallKnob::get_type());
  g_type_ensure(SmallKnobR::get_type());
  g_type_ensure(Switch::get_type());
  g_type_ensure(ToggleImage::get_type());
  g_type_ensure(Tuner::get_type());
  g_type_ensure(ValueDisplay::get_type());
  g_type_ensure(VSlider::get_type());
  g_type_ensure(WaveView::get_type());
  g_type_ensure(Wheel::get_type());
  g_type_ensure(WheelVertical::get_type());

} // wrap_init()

} // Gxw

