// Generated by gmmproc 2.66.7 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gxwmm/midknob.h>
#include <gxwmm/private/midknob_p.h>


/*
 * Copyright (C) 2009, 2010 Hermann Meyer, James Warden, Andreas Degert
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <gxw/GxMidKnob.h>

Gxw::MidKnob::MidKnob(const Glib::RefPtr<Gtk::Adjustment>& adjustment):
	// Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gxw::Knob(Glib::ConstructParams(midknob_class_.init(), "adjustment",adjustment->gobj(), nullptr))
{}

namespace
{
} // anonymous namespace


namespace Glib
{

Gxw::MidKnob* wrap(GxMidKnob* object, bool take_copy)
{
  return dynamic_cast<Gxw::MidKnob *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gxw
{


/* The *_Class implementation: */

const Glib::Class& MidKnob_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &MidKnob_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gx_mid_knob_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void MidKnob_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* MidKnob_Class::wrap_new(GObject* o)
{
  return manage(new MidKnob((GxMidKnob*)(o)));

}


/* The implementation: */

MidKnob::MidKnob(const Glib::ConstructParams& construct_params)
:
  Gxw::Knob(construct_params)
{
  }

MidKnob::MidKnob(GxMidKnob* castitem)
:
  Gxw::Knob((GxKnob*)(castitem))
{
  }


MidKnob::MidKnob(MidKnob&& src) noexcept
: Gxw::Knob(std::move(src))
{}

MidKnob& MidKnob::operator=(MidKnob&& src) noexcept
{
  Gxw::Knob::operator=(std::move(src));
  return *this;
}

MidKnob::~MidKnob() noexcept
{
  destroy_();
}

MidKnob::CppClassType MidKnob::midknob_class_; // initialize static member

GType MidKnob::get_type()
{
  return midknob_class_.init().get_type();
}


GType MidKnob::get_base_type()
{
  return gx_mid_knob_get_type();
}


MidKnob::MidKnob()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gxw::Knob(Glib::ConstructParams(midknob_class_.init()))
{
  

}


} // namespace Gxw


