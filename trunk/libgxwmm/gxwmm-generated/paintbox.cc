// Generated by gmmproc 2.66.7 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gxwmm/paintbox.h>
#include <gxwmm/private/paintbox_p.h>


/*
 * Copyright (C) 2009, 2010 Hermann Meyer, James Warden, Andreas Degert
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <gxw/GxPaintBox.h>

namespace
{
} // anonymous namespace


namespace Glib
{

Gxw::PaintBox* wrap(GxPaintBox* object, bool take_copy)
{
  return dynamic_cast<Gxw::PaintBox *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gxw
{


/* The *_Class implementation: */

const Glib::Class& PaintBox_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &PaintBox_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gx_paint_box_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void PaintBox_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* PaintBox_Class::wrap_new(GObject* o)
{
  return manage(new PaintBox((GxPaintBox*)(o)));

}


/* The implementation: */

PaintBox::PaintBox(const Glib::ConstructParams& construct_params)
:
  Gtk::Box(construct_params)
{
  }

PaintBox::PaintBox(GxPaintBox* castitem)
:
  Gtk::Box((GtkBox*)(castitem))
{
  }


PaintBox::PaintBox(PaintBox&& src) noexcept
: Gtk::Box(std::move(src))
{}

PaintBox& PaintBox::operator=(PaintBox&& src) noexcept
{
  Gtk::Box::operator=(std::move(src));
  return *this;
}

PaintBox::~PaintBox() noexcept
{
  destroy_();
}

PaintBox::CppClassType PaintBox::paintbox_class_; // initialize static member

GType PaintBox::get_type()
{
  return paintbox_class_.init().get_type();
}


GType PaintBox::get_base_type()
{
  return gx_paint_box_get_type();
}


PaintBox::PaintBox(Gtk::Orientation orientation, bool homogeneous, int spacing)
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::Box(Glib::ConstructParams(paintbox_class_.init(), "orientation", ((GtkOrientation)(orientation)), "homogeneous", static_cast<int>(homogeneous), "spacing", spacing, nullptr))
{
  

}

void PaintBox::call_paint_func(cairo_t * cr)
{
  gx_paint_box_call_paint_func(gobj(), cr);
}


Glib::PropertyProxy< Glib::ustring > PaintBox::property_paint_func() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "paint-func");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > PaintBox::property_paint_func() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "paint-func");
}

Glib::PropertyProxy< guint > PaintBox::property_icon_set() 
{
  return Glib::PropertyProxy< guint >(this, "icon-set");
}

Glib::PropertyProxy_ReadOnly< guint > PaintBox::property_icon_set() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "icon-set");
}

Glib::PropertyProxy< guint > PaintBox::property_force_reload() 
{
  return Glib::PropertyProxy< guint >(this, "force-reload");
}

Glib::PropertyProxy_ReadOnly< guint > PaintBox::property_force_reload() const
{
  return Glib::PropertyProxy_ReadOnly< guint >(this, "force-reload");
}


} // namespace Gxw


