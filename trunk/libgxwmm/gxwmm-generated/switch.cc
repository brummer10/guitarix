// Generated by gmmproc 2.66.7 -- DO NOT MODIFY!


#include <glibmm.h>

#include <gxwmm/switch.h>
#include <gxwmm/private/switch_p.h>


/*
 * Copyright (C) 2009, 2010 Hermann Meyer, James Warden, Andreas Degert
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <gxw/GxSwitch.h>

Gxw::Switch::Switch(const Glib::ustring& base_name):
	// Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::CheckButton(Glib::ConstructParams(switch_class_.init(), "base_name",base_name.c_str(), nullptr))
{}

namespace
{
} // anonymous namespace


namespace Glib
{

Gxw::Switch* wrap(GxSwitch* object, bool take_copy)
{
  return dynamic_cast<Gxw::Switch *> (Glib::wrap_auto ((GObject*)(object), take_copy));
}

} /* namespace Glib */

namespace Gxw
{


/* The *_Class implementation: */

const Glib::Class& Switch_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Switch_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gx_switch_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:
  ControlParameter::add_interface(get_type());

  }

  return *this;
}


void Switch_Class::class_init_function(void* g_class, void* class_data)
{
  const auto klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Switch_Class::wrap_new(GObject* o)
{
  return manage(new Switch((GxSwitch*)(o)));

}


/* The implementation: */

Switch::Switch(const Glib::ConstructParams& construct_params)
:
  Gtk::CheckButton(construct_params)
{
  }

Switch::Switch(GxSwitch* castitem)
:
  Gtk::CheckButton((GtkCheckButton*)(castitem))
{
  }


Switch::Switch(Switch&& src) noexcept
: Gtk::CheckButton(std::move(src))
  , ControlParameter(std::move(src))
{}

Switch& Switch::operator=(Switch&& src) noexcept
{
  Gtk::CheckButton::operator=(std::move(src));
  ControlParameter::operator=(std::move(src));
  return *this;
}

Switch::~Switch() noexcept
{
  destroy_();
}

Switch::CppClassType Switch::switch_class_; // initialize static member

GType Switch::get_type()
{
  return switch_class_.init().get_type();
}


GType Switch::get_base_type()
{
  return gx_switch_get_type();
}


Switch::Switch()
:
  // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(nullptr),
  Gtk::CheckButton(Glib::ConstructParams(switch_class_.init()))
{
  

}

void Switch::set_label_ref(Gtk::Label* p1)
{
  gx_switch_set_label_ref(gobj(), (GtkLabel*)Glib::unwrap(p1));
}

Gtk::Label* Switch::get_label_ref()
{
  return Glib::wrap(gx_switch_get_label_ref(gobj()));
}

void Switch::set_base_name(const Glib::ustring& p1)
{
  gx_switch_set_base_name(gobj(), p1.c_str());
}

Glib::ustring Switch::get_base_name()
{
  return Glib::convert_const_gchar_ptr_to_ustring(gx_switch_get_base_name(gobj()));
}


Glib::PropertyProxy< Glib::ustring > Switch::property_base_name() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "base-name");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > Switch::property_base_name() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "base-name");
}

Glib::PropertyProxy< Gtk::Label > Switch::property_label_ref() 
{
  return Glib::PropertyProxy< Gtk::Label >(this, "label-ref");
}

Glib::PropertyProxy_ReadOnly< Gtk::Label > Switch::property_label_ref() const
{
  return Glib::PropertyProxy_ReadOnly< Gtk::Label >(this, "label-ref");
}

Glib::PropertyProxy< Glib::ustring > Switch::property_var_id() 
{
  return Glib::PropertyProxy< Glib::ustring >(this, "var-id");
}

Glib::PropertyProxy_ReadOnly< Glib::ustring > Switch::property_var_id() const
{
  return Glib::PropertyProxy_ReadOnly< Glib::ustring >(this, "var-id");
}


} // namespace Gxw


